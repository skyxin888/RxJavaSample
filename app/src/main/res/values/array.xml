<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="operator_create_title">
        <item>just( ) — 将一个或多个对象转换成发射这个或这些对象的一个Observable。</item>
        <item>from( ) — 将一个Iterable, 一个Future, 或者一个数组转换成一个Observable</item>
        <item>repeat( ) — 创建一个重复发射指定数据或数据序列的Observable</item>
        <item>repeatWhen( ) — 创建一个重复发射指定数据或数据序列的Observable，它依赖于另一个Observable发射的数据</item>
        <item>create( ) — 使用一个函数从头创建一个Observable</item>
        <item>defer( ) — 只有当订阅者订阅才创建Observable；为每个订阅创建一个新的Observable</item>
        <item>range( ) — 创建一个发射指定范围的整数序列的Observable</item>
        <item>interval( ) — 创建一个按照给定的时间间隔发射整数序列的Observable</item>
        <item>timer( ) — 创建一个在给定的延时之后发射单个数据的Observable</item>
        <item>empty( ) — 创建一个什么都不做直接通知完成的Observable</item>
        <item>error( ) — 创建一个什么都不做直接通知错误的Observable</item>
        <item>never( ) — 创建一个不发射任何数据的Observable</item>
    </string-array>

    <string-array name="operator_create_description">
        <item>Just将单个数据转换为发射那个数据的Observable。Just类似于From，但是From会将数组或Iterable的素具取出然后逐个发射，而Just只是简单的原样发射，
            将数组或Iterable当做单个数据。注意：如果你传递null给Just，它会返回一个发射null值的Observable。
            不要误认为它会返回一个空Observable（完全不发射任何数据的Observable,如果需要空Observable你应该使用Empty操作符。</item>
        <item>From将其它种类的对象和数据类型转换为Observable。
            当你使用Observable时，如果你要处理的数据都可以转换成展现为Observables，而不是需要混合使用Observables和其它类型的数据，会非常方便。
            这让你在数据流的整个生命周期中，可以使用一组统一的操作符来管理它们。例如，Iterable可以看成是同步的Observable；Future，
            可以看成是总是只发射单个数据的Observable。通过显式地将那些数据转换为Observables，你可以像使用Observable一样与它们交互。因此，
            大部分ReactiveX实现都提供了将语言特定的对象和数据结构转换为Observables的方法。在RxJava中，from操作符可以转换Future、Iterable和数组。对于Iterable和数组，
            产生的Observable会发射Iterable或数组的每一项数据。</item>
        <item>Repeat重复地发射数据。某些实现允许你重复的发射某个数据序列，还有一些允许你限制重复的次数。
        RxJava将这个操作符实现为repeat方法。它不是创建一个Observable，而是重复发射原始Observable的数据序列，这个序列或者是无限的，或者通过repeat(n)指定重复次数。
        repeat操作符默认在trampoline调度器上执行。可以通过可选参数指定Scheduler。</item>
        <item>repeatWhen，它不是缓存和重放原始Observable的数据序列，而是有条件的重新订阅和发射原来的Observable。
            将原始Observable的终止通知（完成或错误）当做一个void数据传递给一个通知处理器，它以此来决定是否要重新订阅和发射原来的Observable。
            这个通知处理器就像一个Observable操作符，接受一个发射void通知的Observable为输入，返回一个发射void数据（意思是，重新订阅和发射原始Observable）
            或者直接终止（意思是，使用repeatWhen终止发射数据）的Observable。repeatWhen操作符默认在trampoline调度器上执行。
            有一个变体可以通过可选参数指定Scheduler。</item>
        <item>你可以使用Create操作符从头开始创建一个Observable，给这个操作符传递一个接受观察者作为参数的函数，编写这个函数让它的行为表现为一个Observable
            恰当的调用观察者的onNext，onError和onCompleted方法。一个形式正确的有限Observable必须尝试调用观察者的onCompleted正好一次
            或者它的onError正好一次，而且此后不能再调用观察者的任何其它方法。 建议你在传递给create方法的函数中检查观察者的isUnsubscribed状态，
            以便在没有观察者的时候，让你的Observable停止发射数据或者做昂贵的运算。create方法默认不在任何特定的调度器上执行。</item>
        <item>Defer操作符会一直等待直到有观察者订阅它，然后它使用Observable工厂方法生成一个Observable。它对每个观察者都这样做，
            因此尽管每个订阅者都以为自己订阅的是同一个Observable，事实上每个订阅者获取的是它们自己的单独的数据序列。
            在某些情况下，等待直到最后一分钟（就是知道订阅发生时）才生成Observable可以确保Observable包含最新的数据。
            defer方法默认不在任何特定的调度器上执行。</item>
        <item>Range操作符发射一个范围内的有序整数序列，你可以指定范围的起始和长度。RxJava将这个操作符实现为range函数，它接受两个参数，
            一个是范围的起始值，一个是范围的数据的数目。如果你将第二个参数设为0，将导致Observable不发射任何数据（如果设置为负数，会抛异常）。
            range默认不在任何特定的调度器上执行。可以通过可选参数指定Scheduler。</item>
        <item>Interval操作符返回一个Observable，它按固定的时间间隔发射一个无限递增的整数序列。它接受一个表示时间间隔的参数和一个表示时间单位的参数。</item>
        <item>Timer返回一个Observable，它在延迟一段给定的时间后发射一个简单的数字0。timer操作符默认在computation调度器上执行。
            可以通过可选参数指定Scheduler。</item>
        <item>RxJava将这些操作符实现为 empty，never和error。error操作符需要一个Throwable参数，你的Observable会以此终止。这些操作符默认不在任何特定的调度器上执行，
            但是empty和error有一个可选参数是Scheduler，如果你传递了Scheduler参数，它们会在这个调度器上发送通知。</item>
        <item>RxJava将这些操作符实现为 empty，never和error。error操作符需要一个Throwable参数，你的Observable会以此终止。这些操作符默认不在任何特定的调度器上执行，
            但是empty和error有一个可选参数是Scheduler，如果你传递了Scheduler参数，它们会在这个调度器上发送通知。</item>
        <item>RxJava将这些操作符实现为 empty，never和error。error操作符需要一个Throwable参数，你的Observable会以此终止。这些操作符默认不在任何特定的调度器上执行，
            但是empty和error有一个可选参数是Scheduler，如果你传递了Scheduler参数，它们会在这个调度器上发送通知。</item>
    </string-array>

    <string-array name="operator_transform_title">
        <item>map( ) — 对序列的每一项都应用一个函数来变换Observable发射的数据序列</item>
        <item>flatMap( )— 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</item>
        <item>switchMap( ) — 将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射的数据</item>
        <item>scan( ) — 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</item>
        <item>groupBy( ) — 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</item>
        <item>buffer( ) — 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个</item>
        <item>window( ) — 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项</item>
        <item>cast( ) — 在发射之前强制将Observable发射的所有数据转换为指定类型</item>
    </string-array>

    <string-array name="operator_transform_description">
        <item>Map操作符对原始Observable发射的每一项数据应用一个你选择的函数，然后返回一个发射这些结果的Observable。
            RxJava将这个操作符实现为map函数。这个操作符默认不在任何特定的调度器上执行。
        </item>
        <item>FlatMap操作符使用一个指定的函数对原始Observable发射的每一项数据执行变换操作，这个函数返回一个本身也发射数据的Observable，
            然后FlatMap合并这些Observables发射的数据， 最后将合并后的结果当做它自己的数据序列发射。这个方法是很有用的，例如，当你有一个这样的Observable：
            它发射一个数据序列这些数据本身包含Observable成员或者可以变换为Observable，因此你可以创建一个新的Observable发射这些次级Observable发射的数据的
            完整集合。注意：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。</item>
        <item>RxJava还实现了switchMap操作符。它和flatMap很像，除了一点：当原始Observable发射一个新的数据（Observable）时，
            它将取消订阅并停止监视产生执之前那个数据的Observable，只监视当前这一个。</item>
        <item>Scan操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。
            它持续进行这个过程来产生剩余的数据序列。这个操作符在某些情况下被叫做accumulator。这个操作符默认不在任何特定的调度器上执行。</item>
        <item>GroupBy操作符将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射
            是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。RxJava实现了groupBy操作符。它返回Observable的一个特殊子类
            GroupedObservable，实现了GroupedObservable接口的对象有一个额外的方法getKey，这个Key用于将数据分组到指定的Observable。有一个版本的groupBy允许你
            传递一个变换函数，这样它可以在发射结果GroupedObservable之前改变数据项。注意：groupBy将原始Observable分解为一个发射多个GroupedObservable的
            Observable，一旦有订阅，每个GroupedObservable就开始缓存数据。因此，如果你忽略这些GroupedObservable中的任何一个，这个缓存可能形成一个潜在的内存泄露。
            因此，如果你不想观察，也不要忽略GroupedObservable。你应该使用像take(0)这样会丢弃自己的缓存的操作符。如果你取消订阅一个GroupedObservable，
            那个Observable将会终止。如果之后原始的Observable又发射了一个与这个Observable的Key匹配的数据，groupBy将会为这个Key创建一个新的GroupedObservable。
            groupBy默认不在任何特定的调度器上执行。</item>
        <item>Buffer操作符将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合。Buffer操作符在很多语言特定的
            实现中有很多种变体，它们在如何缓存这个问题上存在区别。注意：如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，
            即使在这之前缓存中包含了原始Observable发射的数据。</item>
        <item>Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，
            最后发射一个onCompleted通知。和Buffer一样，Window有很多变体，每一种都以自己的方式将原始Observable分解为多个作为结果的Observable，每一个都包含一个
            映射原始数据的window。用Window操作符的术语描述就是，当一个窗口打开(when a window "opens")意味着一个新的Observable已经发射（产生）了，
            而且这个Observable开始发射来自原始Observable的数据；当一个窗口关闭(when a window "closes")意味着发射(产生)的Observable停止发射原始
            Observable的数据，并且发射终止通知onCompleted给它的观察者们。</item>
        <item>cast操作符将原始Observable发射的每一项数据都强制转换为一个指定的类型，然后再发射数据，它是map的一个特殊版本。</item>
    </string-array>

    <string-array name="operator_combining_title">
        <item>startWith( ) — 在数据序列的开头增加一项数据</item>
        <item>merge( ) — 将多个Observable合并为一个</item>
        <item>mergeDelayError( ) — 合并多个Observables，让没有错误的Observable都完成后再发射错误通知</item>
        <item>zip( ) — 使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果</item>
        <item>and( ), then( ), and when( ) — (rxjava-joins) 通过模式和计划组合多个Observables发射的数据集合</item>
        <item>combineLatest( ) — 当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果</item>
        <item>join( ) and groupJoin( ) — 无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射</item>
        <item>switchOnNext( ) — 将一个发射Observables的Observable转换成另一个Observable，后者发射这些Observables最近发射的数据</item>
    </string-array>
    <string-array name="operator_combining_description">
        <item>如果你想要一个Observable在发射数据之前先发射一个指定的数据序列，可以使用StartWith操作符。（如果你想一个Observable发射的数据末尾追加一个数据序列
            可以使用Concat操作符。）你也可以传递一个Observable给startWith，它会将那个Observable的发射物插在原始Observable发射的数据序列之前，然后把这个当做
            自己的发射物集合。这可以看作是Concat的反转。</item>
        <item>使用Merge操作符你可以将多个Observables的输出合并，就好像它们是一个单个的Observable一样。Merge可能会让合并的Observables发射的数据交错
            （有一个类似的操作符Concat不会让数据交错，它会按顺序一个接着一个发射多个Observables的发射物）。任何一个原始Observable的onError通知会被立即传递给观察者，而且会终止合并后的Observable。</item>
        <item>Merge中任何一个原始Observable的onError通知会被立即传递给观察者，而且会终止合并后的Observable。MergeDelayError的操作符，它的行为有一点不同，
            它会保留onError通知直到合并后的Observable所有的数据发射完成，在那时它才会把onError传递给观察者</item>
    </string-array>
</resources>